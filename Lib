
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

function UI:CreateScreen(parent)
    local screen = Instance.new("ScreenGui")
    screen.Name = "CustomUI"
    screen.Parent = parent
    screen.ResetOnSpawn = false
    return screen
end

function UI:CreateFrame(parent, size, position, bgColor)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = bgColor or Color3.fromRGB(30, 30, 30)
    frame.Parent = parent
    frame.BorderSizePixel = 0
    return frame
end

function UI:CreateButton(parent, text, size, position, callback)
    local btn = Instance.new("TextButton")
    btn.Size = size
    btn.Position = position
    btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
    btn.Text = text
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Parent = parent
    btn.MouseButton1Click:Connect(callback)
    return btn
end

function UI:CreateToggle(parent, text, size, position, callback)
    local toggle = {}
    local isOn = false
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = size
    toggleFrame.Position = position
    toggleFrame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    toggleFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7,0,1,0)
    label.Position = UDim2.new(0,0,0,0)
    label.Text = text
    label.TextColor3 = Color3.new(1,1,1)
    label.BackgroundTransparency = 1
    label.Parent = toggleFrame
    
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0.3, -4, 1, -4)
    indicator.Position = UDim2.new(0.7, 2, 0.5, -10)
    indicator.AnchorPoint = Vector2.new(0,0.5)
    indicator.BackgroundColor3 = Color3.fromRGB(200,0,0)
    indicator.Parent = toggleFrame

    toggleFrame.MouseButton1Click:Connect(function()
        isOn = not isOn
        indicator.BackgroundColor3 = isOn and Color3.fromRGB(0,200,0) or Color3.fromRGB(200,0,0)
        callback(isOn)
    end)

    function toggle:GetState()
        return isOn
    end

    return toggle
end

function UI:CreateSlider(parent, text, min, max, default, size, position, callback)
    local slider = {}
    local value = default

    local container = Instance.new("Frame")
    container.Size = size
    container.Position = position
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,0.3,0)
    label.Position = UDim2.new(0,0,0,0)
    label.Text = text .. ": " .. tostring(value)
    label.TextColor3 = Color3.new(1,1,1)
    label.BackgroundTransparency = 1
    label.Parent = container

    local track = Instance.new("Frame")
    track.Size = UDim2.new(1, -20, 0.2, 0)
    track.Position = UDim2.new(0,10,0.4,0)
    track.BackgroundColor3 = Color3.fromRGB(100,100,100)
    track.Parent = container

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new(0, 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0,200,0)
    fill.Parent = track

    local thumb = Instance.new("Frame")
    thumb.Size = UDim2.new(0, 20, 1, 0)
    thumb.Position = UDim2.new(0,0,0,0)
    thumb.BackgroundColor3 = Color3.fromRGB(200,200,200)
    thumb.Parent = track

    local dragging = false

    thumb.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = input.Position.X
            local trackPos = track.AbsolutePosition.X
            local trackWidth = track.AbsoluteSize.X
            local newPercent = math.clamp((mouseX - trackPos) / trackWidth, 0, 1)
            fill.Size = UDim2.new(newPercent, 0, 1, 0)
            value = math.floor(min + (max - min) * newPercent)
            label.Text = text .. ": " .. tostring(value)
            callback(value)
        end
    end)

    function slider:GetValue()
        return value
    end

    return slider
end

function UI:CreateDropdown(parent, options, size, position, callback)
    local dropdown = {}
    local selected = options[1]

    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    frame.Parent = parent

    local selectedLabel = Instance.new("TextLabel")
    selectedLabel.Size = UDim2.new(1,0,0.3,0)
    selectedLabel.Position = UDim2.new(0,0,0,0)
    selectedLabel.Text = selected
    selectedLabel.TextColor3 = Color3.new(1,1,1)
    selectedLabel.BackgroundTransparency = 1
    selectedLabel.Parent = frame

    local optionsFrame = Instance.new("Frame")
    optionsFrame.Size = UDim2.new(1,0,0, #options*20)
    optionsFrame.Position = UDim2.new(0,0,0.3,0)
    optionsFrame.BackgroundColor3 = Color3.fromRGB(70,70,70)
    optionsFrame.Visible = false
    optionsFrame.Parent = frame

    for i, option in ipairs(options) do
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1,0,0,20)
        btn.Position = UDim2.new(0,0,(i-1)*20,0)
        btn.Text = option
        btn.TextColor3 = Color3.new(1,1,1)
        btn.BackgroundColor3 = Color3.fromRGB(80,80,80)
        btn.Parent = optionsFrame

        btn.MouseButton1Click:Connect(function()
            selected = option
            selectedLabel.Text = selected
            optionsFrame.Visible = false
            callback(selected)
        end)
    end

    selectedLabel.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
    end)

    return {
        GetSelected = function() return selected end
    }
end

function UI:CreateTextbox(parent, text, size, position, callback)
    local textbox = {}
    local box = Instance.new("TextBox")
    box.Size = size
    box.Position = position
    box.Text = text
    box.TextColor3 = Color3.new(1,1,1)
    box.BackgroundColor3 = Color3.fromRGB(50,50,50)
    box.ClearTextOnFocus = false
    box.Parent = parent

    box.FocusLost:Connect(function(enterPressed)
        callback(box.Text)
    end)

    function textbox:GetText()
        return box.Text
    end

    return textbox
end



    local keybind = {}
    local currentKey = Enum.KeyCode.Unknown
    
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Text = text .. ": " .. (currentKey.Name or "None")
    label.TextColor3 = Color3.new(1, 1, 1)
    label.BackgroundTransparency = 1
    label.Parent = frame
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.3, 0, 1, 0)
    button.Position = UDim2.new(0.7, 0, 0, 0)
    button.Text = "Set"
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    button.Parent = frame
    
    local waitingForKey = false
    
    button.MouseButton1Click:Connect(function()
        label.Text = text .. ": Press a key..."
        waitingForKey = true
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if waitingForKey and not gameProcessed then
            if input.UserInputType == Enum.UserInputType.Keyboard then
                currentKey = input.KeyCode
                label.Text = text .. ": " .. currentKey.Name
                waitingForKey = false
                callback(currentKey)
            end
        end
    end)
    
    function keybind:GetKey()
        return currentKey
    end
    
    return keybind
end
